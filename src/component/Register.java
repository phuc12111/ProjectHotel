/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package component;

import com.microsoft.sqlserver.jdbc.SQLServerDataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 *
 * @author Admin
 */
public class Register extends javax.swing.JFrame {

    /**
     * Creates new form Register
     */
    private DefaultListModel<String> classListModel;
    private JList<String> classList;
    private final SQLServerDataSource ds;

    public Register() {
        initComponents();
        ds = new SQLServerDataSource();
        ds.setUser("sa");
        ds.setPassword("sqladmin");
        ds.setDatabaseName("HotelManager");
        ds.setServerName("DESKTOP-31C7ISK\\SQLEXPRESS");
        ds.setPortNumber(1433);
        ds.setEncrypt(false);
        listModel = new DefaultListModel<>();
        listroom.setModel(listModel);
        loadDataFromDatabase();
    }

    public String Customer_id() {
        return txtcccd.getText();
    }

    DefaultListModel<String> listModel = new DefaultListModel<>();

    private void loadDataFromDatabase() {
        try (Connection connection = ds.getConnection()) {
            // Truy vấn SQL để lấy danh sách các lớp thỏa mãn điều kiện
            String selectSql = "SELECT room_name FROM room WHERE status = 1";
            try (PreparedStatement selectStatement = connection.prepareStatement(selectSql)) {
                ResultSet resultSet = selectStatement.executeQuery();

                while (resultSet.next()) {
                    String className = resultSet.getString("room_name");
                    listModel.addElement(className);
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi kết nối đến cơ sở dữ liệu: " + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtcccd = new javax.swing.JTextField();
        txtten = new javax.swing.JTextField();
        txtphone = new javax.swing.JTextField();
        btn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listroom = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtstart = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btn.setText("Dang ki");
        btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(listroom);

        jLabel1.setText("nhap cccd");

        jLabel2.setText("ten");

        jLabel3.setText("phone");

        jLabel4.setText("start date");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtstart, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                            .addComponent(txtphone, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtten, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtcccd, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(btn)))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtcccd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addGap(62, 62, 62))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(txtten, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtphone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtstart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(31, 31, 31)
                .addComponent(btn)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActionPerformed

        String cccd = txtcccd.getText();
        String ten = txtten.getText();
        String phone = txtphone.getText();
        String start = txtstart.getText(); // Ngày bắt đầu nhận phòng

        // Lấy mã phòng được chọn từ danh sách
        String selectedRoom = listroom.getSelectedValue();

        if (selectedRoom == null) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn phòng trước khi đăng kí.");
            return;
        }

        try (var connection = ds.getConnection()) {
            // Bắt đầu một giao dịch
            connection.setAutoCommit(false);

            // Kiểm tra xem giá trị cccd đã tồn tại trong bảng customer hay chưa
            String checkCustomerSql = "SELECT customer_code FROM customer WHERE customer_code = ?";
            boolean customerExists = false;

            try (PreparedStatement checkCustomerStatement = connection.prepareStatement(checkCustomerSql)) {
                checkCustomerStatement.setString(1, cccd);
                ResultSet customerResult = checkCustomerStatement.executeQuery();

                if (customerResult.next()) {
                    customerExists = true;
                }
            }

            if (!customerExists) {
                // Nếu giá trị cccd không tồn tại trong bảng customer, hãy thêm nó vào bảng customer trước
                String insertCustomerSql = "INSERT INTO customer (customer_code, customer_name, customer_phone) VALUES (?, ?, ?)";

                try (PreparedStatement insertCustomerStatement = connection.prepareStatement(insertCustomerSql)) {
                    insertCustomerStatement.setString(1, cccd);
                    insertCustomerStatement.setString(2, ten);
                    insertCustomerStatement.setString(3, phone);

                    insertCustomerStatement.executeUpdate();
                }
            }

            // Tiếp tục với việc thêm thông tin đăng ký phòng vào bảng use_room
            String insertBookingSql = "INSERT INTO use_room (customer_code, room_code, check_in_date, check_out_date, use_room_id) "
                    + "VALUES (?, ?, ?, NULL, ?)"; // Ngày kết thúc là null khi chưa trả phòng

            // Lấy mã phòng từ tên phòng đã chọn
            String getRoomCodeSql = "SELECT room_code FROM room WHERE room_name = ?";
            int roomId = -1; // Mã phòng

            try (PreparedStatement getRoomCodeStatement = connection.prepareStatement(getRoomCodeSql)) {
                getRoomCodeStatement.setString(1, selectedRoom);
                ResultSet roomCodeResult = getRoomCodeStatement.executeQuery();

                if (roomCodeResult.next()) {
                    roomId = roomCodeResult.getInt("room_code");
                }
            }

            // Chuyển đổi ngày bắt đầu từ chuỗi sang kiểu java.sql.Date
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            java.util.Date parsedDate = null;
            try {
                parsedDate = dateFormat.parse(start);
            } catch (ParseException ex) {
                Logger.getLogger(Register.class.getName()).log(Level.SEVERE, null, ex);
            }
            java.sql.Date sqlStartDate = new java.sql.Date(parsedDate.getTime());

            try (PreparedStatement insertBookingStatement = connection.prepareStatement(insertBookingSql)) {
                insertBookingStatement.setString(1, cccd); // Sử dụng cccd làm giá trị cho customer_code
                insertBookingStatement.setInt(2, roomId);
                insertBookingStatement.setDate(3, sqlStartDate); // Ngày bắt đầu nhận phòng

                // Tạo giá trị ngẫu nhiên cho use_room_id (bạn có thể thay thế phần này bằng cách xác định một giá trị duy nhất)
                int useRoomId = (int) (Math.random() * 1000000);
                insertBookingStatement.setInt(4, useRoomId);

                insertBookingStatement.executeUpdate();

                // Cập nhật trạng thái phòng thành 0
                String updateRoomStatusSql = "UPDATE room SET status = 0 WHERE room_code = ?";
                try (PreparedStatement updateRoomStatusStatement = connection.prepareStatement(updateRoomStatusSql)) {
                    updateRoomStatusStatement.setInt(1, roomId);
                    updateRoomStatusStatement.executeUpdate();

                    // Kết thúc giao dịch và lưu các thay đổi
                    connection.commit();

                    JOptionPane.showMessageDialog(this, "Đăng kí phòng thành công!");
                    String id = Customer_id();
                    Sirvice si = new Sirvice(id);
                    si.setVisible(true);
                    this.dispose();
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi kết nối đến cơ sở dữ liệu: " + ex.getMessage());
        }

    }//GEN-LAST:event_btnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Register.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Register.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Register.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Register.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Register().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listroom;
    private javax.swing.JTextField txtcccd;
    private javax.swing.JTextField txtphone;
    private javax.swing.JTextField txtstart;
    private javax.swing.JTextField txtten;
    // End of variables declaration//GEN-END:variables
}
