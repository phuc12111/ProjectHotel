/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package component;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import com.microsoft.sqlserver.jdbc.SQLServerDataSource;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Admin
 */
public class CheckOut extends javax.swing.JPanel {

    /**
     * Creates new form CheckOut
     */
    private final SQLServerDataSource ds;

    public CheckOut() {
        initComponents();
        ds = new SQLServerDataSource();
        ds.setUser("sa");
        ds.setPassword("sqladmin");
        ds.setDatabaseName("HotelManager");
        ds.setServerName("DESKTOP-31C7ISK\\SQLEXPRESS");
        ds.setPortNumber(1433);
        ds.setEncrypt(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtcccd = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtend = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(900, 500));

        jPanel1.setBackground(new java.awt.Color(249, 249, 249));

        txtcccd.setBackground(new java.awt.Color(238, 238, 238));
        txtcccd.setToolTipText("Please enter");
        txtcccd.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtcccd.setName(""); // NOI18N
        txtcccd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtcccdActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("identyti card");

        txtend.setBackground(new java.awt.Color(232, 232, 232));
        txtend.setToolTipText("Please enter");
        txtend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtendActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("End Date");
        jLabel2.setToolTipText("");

        btn.setBackground(new java.awt.Color(204, 255, 204));
        btn.setText("Check");
        btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActionPerformed(evt);
            }
        });

        jLabel4.setText("YYYY/MM/DD");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("Check out");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(373, 373, 373)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(208, 208, 208)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(68, 68, 68)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtcccd, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                            .addComponent(txtend))
                        .addGap(28, 28, 28)
                        .addComponent(jLabel4)))
                .addContainerGap(122, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(340, 340, 340))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtcccd, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(88, 88, 88)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtend, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(65, 65, 65)
                .addComponent(btn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(110, Short.MAX_VALUE))
        );

        txtcccd.getAccessibleContext().setAccessibleName("");
        txtcccd.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActionPerformed
        String cccd = txtcccd.getText();
        String endDateStr = txtend.getText();

        // Kiểm tra ngày trả phòng hợp lệ (không rỗng và đúng định dạng)
        if (endDateStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter check-out date.");
            return;
        }

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date endDate;
        try {
            endDate = dateFormat.parse(endDateStr);
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "The check-out date is not in the correct format (yyyy-MM-dd).");
            return;
        }

        try (Connection connection = ds.getConnection()) {
            // Bắt đầu một giao dịch
            connection.setAutoCommit(false);

            // Lấy thông tin ngày nhận phòng và mã phòng của khách hàng từ bảng use_room
            String selectRoomInfoSql = "SELECT check_in_date, room_code FROM use_room WHERE customer_code = ?";
            Date checkInDate = null;
            int roomCode = -1;

            try (PreparedStatement selectRoomInfoStatement = connection.prepareStatement(selectRoomInfoSql)) {
                selectRoomInfoStatement.setString(1, cccd);
                ResultSet resultSet = selectRoomInfoStatement.executeQuery();

                if (resultSet.next()) {
                    checkInDate = resultSet.getDate("check_in_date");
                    roomCode = resultSet.getInt("room_code");
                }
            }

            // Kiểm tra ngày trả phòng có hợp lệ (lớn hơn ngày nhận)
            if (checkInDate == null || endDate.before(checkInDate)) {
                JOptionPane.showMessageDialog(this, "Invalid check-out date.");
                return;
            }

            // Cập nhật ngày trả phòng trong bảng use_room
            String updateCheckOutDateSql = "UPDATE use_room SET check_out_date = ? WHERE customer_code = ?";
            try (PreparedStatement updateCheckOutDateStatement = connection.prepareStatement(updateCheckOutDateSql)) {
                updateCheckOutDateStatement.setDate(1, new java.sql.Date(endDate.getTime()));
                updateCheckOutDateStatement.setString(2, cccd);
                updateCheckOutDateStatement.executeUpdate();
            }

            // Tính số ngày đã ở
            long timeDifference = endDate.getTime() - checkInDate.getTime();
            int numberOfDays = (int) (timeDifference / (1000 * 60 * 60 * 24));

            // Cập nhật trạng thái phòng thành trống (status = 1)
            String updateRoomStatusSql = "UPDATE room SET status = 1 WHERE room_code = ?";
            try (PreparedStatement updateRoomStatusStatement = connection.prepareStatement(updateRoomStatusSql)) {
                updateRoomStatusStatement.setInt(1, roomCode);
                updateRoomStatusStatement.executeUpdate();
            }

            // Lấy thông tin giá phòng
            String selectRoomPriceSql = "SELECT price FROM room WHERE room_code = ?";
            double roomPrice = 0.0;

            try (PreparedStatement selectRoomPriceStatement = connection.prepareStatement(selectRoomPriceSql)) {
                selectRoomPriceStatement.setInt(1, roomCode);
                ResultSet priceResultSet = selectRoomPriceStatement.executeQuery();

                if (priceResultSet.next()) {
                    roomPrice = priceResultSet.getDouble("price");
                }
            }

            // Lấy thông tin dịch vụ từ bảng use_service
            String selectServiceInfoSql = "SELECT s.service_name, us.use_date, s.service_prices "
                    + "FROM use_service us "
                    + "INNER JOIN service s ON us.service_code = s.service_code "
                    + "WHERE us.customer_code = ?";
            String serviceName = "";
            String useDate = "";
            double servicePrice = 0.0;

            try (PreparedStatement selectServiceInfoStatement = connection.prepareStatement(selectServiceInfoSql)) {
                selectServiceInfoStatement.setString(1, cccd);
                ResultSet serviceResultSet = selectServiceInfoStatement.executeQuery();

                while (serviceResultSet.next()) {
                    serviceName += serviceResultSet.getString("service_name") + "\n";
                    useDate += serviceResultSet.getString("use_date") + "\n";
                    servicePrice += serviceResultSet.getDouble("service_prices");
                }
            }

            // Tổng tiền = Tiền phòng + Tiền dịch vụ
            double totalAmount = (numberOfDays * roomPrice) + servicePrice;

            // Lấy thông tin khách hàng và số ngày ở từ bảng use_room
            String selectCustomerInfoSql = "SELECT c.customer_name, r.price FROM use_room ur "
                    + "INNER JOIN customer c ON ur.customer_code = c.customer_code "
                    + "INNER JOIN room r ON ur.room_code = r.room_code "
                    + "WHERE ur.customer_code = ?";
            String customerName = "";

            try (PreparedStatement selectCustomerInfoStatement = connection.prepareStatement(selectCustomerInfoSql)) {
                selectCustomerInfoStatement.setString(1, cccd);
                ResultSet resultSet = selectCustomerInfoStatement.executeQuery();

                if (resultSet.next()) {
                    customerName = resultSet.getString("customer_name");
                }
            }

            // Tạo workbook và trang tính Excel
            Workbook workbook = new XSSFWorkbook();
            Sheet sheet = workbook.createSheet("Bill");

            // Tạo dòng tiêu đề
            Row headerRow = sheet.createRow(0);
            headerRow.createCell(0).setCellValue("Customer name");
            headerRow.createCell(1).setCellValue("days of stay");
            headerRow.createCell(2).setCellValue("Room Rates");
            headerRow.createCell(3).setCellValue("service name");
            headerRow.createCell(4).setCellValue("date of service");
            headerRow.createCell(5).setCellValue("service price");
            headerRow.createCell(6).setCellValue("Total amount");

            // Thêm dữ liệu bill
            Row dataRow = sheet.createRow(1);
            dataRow.createCell(0).setCellValue(customerName);
            dataRow.createCell(1).setCellValue(numberOfDays);
            dataRow.createCell(2).setCellValue(roomPrice * numberOfDays);
            dataRow.createCell(3).setCellValue(serviceName);
            dataRow.createCell(4).setCellValue(useDate);
            dataRow.createCell(5).setCellValue(servicePrice);
            dataRow.createCell(6).setCellValue(totalAmount);

            // Lưu workbook vào tệp Excel
            String billFileName = customerName + "_Bill.xlsx"; // Tên tệp Excel
            try (FileOutputStream outputStream = new FileOutputStream(new File("E:\\" + billFileName))) {
                workbook.write(outputStream);
                JOptionPane.showMessageDialog(this, "Bill has been exported successfully and saved at D:\\" + billFileName);
            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error saving Excel file.");
            }
            // Kết thúc giao dịch và lưu các thay đổi
            connection.commit();

        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error connecting to database: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnActionPerformed

    private void txtcccdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtcccdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtcccdActionPerformed

    private void txtendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtendActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtendActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtcccd;
    private javax.swing.JTextField txtend;
    // End of variables declaration//GEN-END:variables
}
